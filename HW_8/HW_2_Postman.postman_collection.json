{
	"info": {
		"_postman_id": "71ace425-0346-40aa-af22-b22680eaa46d",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20297092"
	},
	"item": [
		{
			"name": "1. Endpoint /first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.   ok\r",
							"http://162.55.220.72:5005/first\r",
							"\r",
							"// 2. Статус код 200    ok\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"    pm.test(\"Body matches string\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Endpoint /user_Info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"http://162.55.220.72:5007/user_info_3 \r",
							"\r",
							"// 2. Статус код 200   \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.   \r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)  ok\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Oleg\")\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)  \r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"32\")\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить рукteами.) ok\r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(3800)\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"compare name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"compare age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"compare salary\", function () {\r",
							"    pm.expect(+jsonData.salary).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.    \r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)   \r",
							"salary_x4 = ((+req.salary) * 4)\r",
							"pm.test(\"compare_u_salary_1_5_year\", function () {\r",
							"    pm.expect(+jsonData.family.u_salary_1_5_year).to.equal(req.salary * 4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleg Borisovich",
							"disabled": true
						},
						{
							"key": "age",
							"value": "32",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "3800",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Endpoint /object_Info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1. Отправить запрос.\r",
							"http://162.55.220.72:5007/object_info_3?name=Oleg&age=32&salary=3800\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"compare_name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"compare_age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"compare_salary\", function () {\r",
							"    pm.expect(+resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_has_property_name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_has_property_age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"param name equal Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"param age equal 4\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleg",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "32",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "3800",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Oleg&age=32&salary=3800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleg"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "3800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Endpoint /object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"\r",
							"// 1. Отправить запрос.\r",
							"// http://162.55.220.72:5005/object_info_4?name=Oleg&age=32&salary =3800\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const req1 = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"compare name\", function () {\r",
							"    pm.expect(resp.name).eql(req1.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"compare age\", function () {\r",
							"    pm.expect(resp.age).eql(+req1.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req1.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"compare salary\", function () {\r",
							"    pm.expect(+resp.salary[0]).eql(+req1.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"compare salary\", function () {\r",
							"    pm.expect(+resp.salary[1]).eql(req1.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"compare salary\", function () {\r",
							"    pm.expect(+resp.salary[2]).eql(+req1.salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"const nameResp = resp.name;\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"const ageResp = resp.age;\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"const salaryResp = resp.salary;\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"nameRespEnv\",nameResp);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"ageRespEnv\",ageResp);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salaryRespEnv\",salaryResp[0]);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (let i = 0; i<resp.salary.length; i++) {\r",
							"    console.log(resp.salary[i] + \" test\");\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Oleg&age=32&salary=800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Oleg"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Endpoint /user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 29_QA_Free_Channel, [5/14/2022 9:39 AM]\r",
							"// http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"\r",
							"// 1. Вставить параметр salary из окружения в request \r",
							"//{{salaryRespEnv}}\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"//{{ageRespEnv}}\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"//{{nameRespEnv}}\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const resp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							" const req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"have_prop_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"have_prop_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"have_prop_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"have_prop_qa_salary_after_1.5year\", function () {\r",
							"   pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"have_prop_qa_salary_after_3.5year\", function () {\r",
							"   pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"have_prop_person\", function () {\r",
							"   pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"compare start_qa_salary\", function () {\r",
							"    pm.expect(+resp.start_qa_salary).eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"compare 6m_qa_salary\", function () {\r",
							"    pm.expect(+resp.qa_salary_after_6_months).eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"compare 12m_qa_salary\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"compare 12m_qa_salary\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"compare 12m_qa_salary\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"compare_salary\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"compare_salary\", function () {\r",
							"    pm.expect(resp.person.u_age).eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"compare_u_salary_5_years\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).eql((req.salary)*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for(let m in resp.person) {\r",
							"    if(typeof(resp.person[m]) == 'object') {\r",
							"        console.log(m + ':')\r",
							"        for(let i = 0; i<Object.keys(resp.person[m]).length;i++) {\r",
							"            console.log(resp.person[m][i])\r",
							"      }\r",
							"    }\r",
							"    else { console.log(m + ':'+ resp.person[m])\r",
							"        }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"  \r",
							"\r",
							"\r",
							"        \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{nameRespEnv}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salaryRespEnv}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{ageRespEnv}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}